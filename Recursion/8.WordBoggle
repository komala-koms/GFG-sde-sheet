public String[] wordBoggle(char board[][], String[] dictionary)
   {
       int n=board.length;
       int m=board[0].length;
       int visited[][]=new int[n][m];
       Set<String> al=new HashSet<>();
       
       for(int k=0;k<dictionary.length;k++)
       {
           String str=dictionary[k];
           for(int i=0;i<n;i++)
           {
               for(int j=0;j<m;j++)
               {
                   char ch=str.charAt(0);
                   if(board[i][j]==ch&&dfs(board,i,j,visited,str,0))
                   {
                       al.add(str);
                   }
               }
           }
       }
       int i=0;
       String ans[]=new String[al.size()];
       for(String s:al)
       ans[i++]=s;
       
       return ans;
   }
   public static boolean dfs(char board[][],int i,int j,int visited[][],String str,int idx)
   {
       if(idx==str.length())
       return true;
       
       
       if(i<0||j<0||i>=board.length||j>=board[0].length||visited[i][j]==1||str.charAt(idx)!=board[i][j])
       return false;
       
       visited[i][j]=1;
       boolean ld=dfs(board,i-1,j-1,visited,str,idx+1);
       boolean up=dfs(board,i-1,j,visited,str,idx+1);
       boolean rd=dfs(board,i-1,j+1,visited,str,idx+1);
       boolean left=dfs(board,i,j-1,visited,str,idx+1);
       boolean right=dfs(board,i,j+1,visited,str,idx+1);
       boolean dl=dfs(board,i+1,j-1,visited,str,idx+1);
       boolean down=dfs(board,i+1,j,visited,str,idx+1);
       boolean dr=dfs(board,i+1,j+1,visited,str,idx+1);
       
       visited[i][j]=0;
       return ld||up||rd||left||right||dl||down||dr; 
       
   }
